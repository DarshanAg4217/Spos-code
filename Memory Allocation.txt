#include<iostream> 
#include<vector> 
#include<climits> 
#include<string>
using namespace std; 

struct MemoryBlock {

int id; int size;
bool allocated;
};

void displayTable(const vector<MemoryBlock>& memory) { cout << "Memory\t|\tStatus\t|\tProcess\n";
cout << "	\n";

for (const MemoryBlock& block : memory) {
	string status = block.allocated ? "Allocated" : "Free";
	string process = block.allocated ? "Process-" + to_string(block.id) : "N/A";

	cout << block.size << "KB\t|\t" << status << "\t|\t" << process << "\n";
}

cout << "	\n";
}

void firstFit(vector<MemoryBlock>& memory, int processSize, int processId) { for (MemoryBlock& block : memory) {
if (!block.allocated && block.size >= processSize) { 
	block.allocated = true;
	block.id = processId; break;
}
}
}

void bestFit(vector<MemoryBlock>& memory, int processSize, int processId) { int bestFitIndex = -1;
int minSize = INT_MAX;

for (int i = 0; i < memory.size(); ++i) {
	if (!memory[i].allocated && memory[i].size >= processSize && memory[i].size < minSize) {
		bestFitIndex = i;
		minSize = memory[i].size;
 
}
}

if (bestFitIndex != -1) { memory[bestFitIndex].allocated = true; 
	memory[bestFitIndex].id = processId;
}
}

void worstFit(vector<MemoryBlock>& memory, int processSize, int processId) { int worstFitIndex = -1;
int maxSize = INT_MIN;

for (int i = 0; i < memory.size(); ++i) {
	if (!memory[i].allocated && memory[i].size >= processSize && memory[i].size > maxSize) {
		worstFitIndex = i; maxSize = memory[i].size;
}
}

if (worstFitIndex != -1) { memory[worstFitIndex].allocated = true; 
	memory[worstFitIndex].id = processId;
}
}

int main() {
vector<MemoryBlock> memory = { {1, 100, false}, {2, 50, false}, {3, 200, false}, {4, 80, false} };
displayTable(memory);

int choice, processSize, processId; char exitChoice;
do{
	cout << "Enter process size: "; cin >> processSize; cout<<"Enter Id: "; cin>>processId;

	cout << "Choose memory placement strategy:\n"; cout << "1. First Fit\n2. Best Fit\n3. Worst Fit\n"; cin >> choice;

	switch (choice) {
		case 1:
		firstFit(memory, processSize, processId); displayTable(memory);
		break;
 
		case 2:
		bestFit(memory, processSize, processId); displayTable(memory);
		break; 
		case 3:
		worstFit(memory, processSize, processId); displayTable(memory);
		break; default:
		cout << "Invalid choice!\n"; return 1;
		}
		cout << "Do you want to continue? (y/n): "; cin >> exitChoice;
} while (exitChoice == 'y' || exitChoice == 'Y');


return 0;
}